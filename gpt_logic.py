import os
from openai import OpenAI
from dotenv import load_dotenv
from search_service import search_service_in_csv

load_dotenv()
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

def explain_query_with_gpt(user_query: str) -> str:
    results = search_service_in_csv(user_query)

    if not results:
        return "‚ö†Ô∏è –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ –≥–æ—Å—É—Å–ª—É–≥."

    # –ö—Ä–∞—Ç–∫–æ–µ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –æ—Ç GPT
    intro_response = client.chat.completions.create(
        model="gpt-4-turbo",
        messages=[
            {"role": "system", "content": "–¢—ã –∫—Ä–∞—Ç–∫–∏–π, –ø–æ–Ω—è—Ç–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω –ø–æ egov"},
            {"role": "user", "content": f"–ö—Ä–∞—Ç–∫–æ –æ–±—ä—è—Å–Ω–∏, —á—Ç–æ —Ç–∞–∫–æ–µ: {user_query}. –û–ø–∏—à–∏ –∫–∞–∫ –≥–æ—Å—É—Å–ª—É–≥—É, –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤."}
        ],
        max_tokens=300,
        temperature=0.5
    )
    intro_text = intro_response.choices[0].message.content.strip()

    services_block = "üìå –í–∞–º –º–æ–≥—É—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –≥–æ—Å—É—Å–ª—É–≥–∏:\n\n"
    for r in results[:5]:
        services_block += f"üîπ <b>{r['–£—Å–ª—É–≥–∞']}</b>\n‚û°Ô∏è {r['–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–∫–∞–∑–∞–Ω–∏—è —É—Å–ª—É–≥–∏']}\nüîó <a href='{r['–°—Å—ã–ª–∫–∞']}'>–ü–µ—Ä–µ–π—Ç–∏</a>\n\n"

    return f"{intro_text}\n\n{services_block}"
