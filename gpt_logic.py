import os
from openai import OpenAI
from dotenv import load_dotenv
from search_service import search_service_in_csv

load_dotenv()
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))


def explain_query_with_gpt(user_query: str, results: list[dict]) -> str:


    if results:
        intro_response = client.chat.completions.create(
            model="gpt-4-turbo",
            messages=[
                {
                    "role": "system",
                    "content": (
                        "–¢—ã –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç. –û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ, —á—ë—Ç–∫–æ, –∫—Ä–∞—Ç–∫–æ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è), –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π. "
                        "–ù–µ –ø–æ–≤—Ç–æ—Ä—è–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ò–∑–±–µ–≥–∞–π –≤–æ–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏, –µ—Å–ª–∏ –º–æ–∂–µ—à—å. "
                        "–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–∏—à–∏ —Å–ª–æ–≤–æ –±–æ–ª–µ–µ –æ–¥–Ω–æ–≥–æ —Ä–∞–∑–∞. –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ ‚Äî HTML. "
                    )
                },

                {"role": "user",
                 "content": f"–ö—Ä–∞—Ç–∫–æ –æ–±—ä—è—Å–Ω–∏, —á—Ç–æ —Ç–∞–∫–æ–µ: {user_query}. –û–ø–∏—à–∏ –∫–∞–∫ –≥–æ—Å—É—Å–ª—É–≥—É, –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤."}
            ],
            max_tokens=300,
            temperature=0.5
        )
        intro_text = intro_response.choices[0].message.content.strip()

        services_block = "üìå –í–∞–º –º–æ–≥—É—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –≥–æ—Å—É—Å–ª—É–≥–∏:\n\n"
        for r in results[:5]:
            services_block += (
                f"üîπ <b>{r['–£—Å–ª—É–≥–∞']}</b>\n"
                f"‚û°Ô∏è {r['–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–∫–∞–∑–∞–Ω–∏—è —É—Å–ª—É–≥–∏']}\n"
                f"üîó <a href='{r['–°—Å—ã–ª–∫–∞']}'>–ü–µ—Ä–µ–π—Ç–∏</a>\n\n"
            )

        return f"{intro_text}\n\n{services_block}"

    else:
        fallback_response = client.chat.completions.create(
            model="gpt-4-turbo",
            messages=[
                {"role": "system",
                 "content": "–¢—ã –∫—Ä–∞—Ç–∫–∏–π, –ø–æ–Ω—è—Ç–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ egov, —Ä–∞–∑–±–∏—Ä–∞—é—â–∏–π—Å—è –≤ –∫–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∏—Ö –∑–∞–∫–æ–Ω–∞—Ö. –û—Ç–≤–µ—á–∞–π –≤ HTML-—Ñ–æ—Ä–º–∞—Ç–µ, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π Markdown."},
                {"role": "user",
                 "content": f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å: {user_query}. –û–±—ä—è—Å–Ω–∏, –∫–∞–∫–∞—è –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–ª–∏ —É—Å–ª—É–≥–∞, –µ—Å–ª–∏ –¥–∞–∂–µ —Ç–æ—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –≤ –±–∞–∑–µ –Ω–µ—Ç."}
            ],
            max_tokens=300,
            temperature=0.5
        )
        return fallback_response.choices[0].message.content.strip()
