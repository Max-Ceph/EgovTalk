#%%
import requests
from bs4 import BeautifulSoup
import pandas as pd
import os

# ---------------- –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã ----------------
def download_html(url, filename):
    if os.path.exists(filename):
        print(f"‚ö° –§–∞–π–ª {filename} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ.")
        return

    headers = {"User-Agent": "Mozilla/5.0"}
    response = requests.get(url, headers=headers)
    response.raise_for_status()

    with open(filename, "w", encoding="utf-8") as file:
        file.write(response.text)

    print(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {filename}")

# ---------------- –ü–∞—Ä—Å–∏–Ω–≥ —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥ ----------------
def parse_services(html_file, base_url):
    with open(html_file, encoding="utf-8") as file:
        soup = BeautifulSoup(file.read(), 'html.parser')

    services = []

    service_blocks = soup.select('div#region-frontpage-servs ul li a, div#region-frontpage-favs ul li a, div#region-content ul li a')

    for link in service_blocks:
        service_name = link.get_text(strip=True)
        service_href = link.get('href')

        if not service_href:
            continue

        if service_href.startswith("/"):
            service_href = base_url + service_href

        services.append({
            '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': '-',  # –ó–∞–≥–ª—É—à–∫–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ, –º–æ–∂–Ω–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ—Ç–¥–µ–ª—å–Ω–æ)
            '–£—Å–ª—É–≥–∞': service_name,
            '–°—Å—ã–ª–∫–∞': service_href
        })

    return pd.DataFrame(services)

# ---------------- –ü–∞—Ä—Å–∏–Ω–≥ "–†–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ–∫–∞–∑–∞–Ω–∏—è —É—Å–ª—É–≥–∏" ----------------
def extract_service_result(url, result_keyword):
    try:
        headers = {"User-Agent": "Mozilla/5.0"}
        response = requests.get(url, headers=headers)
        response.raise_for_status()
        soup = BeautifulSoup(response.text, 'html.parser')

        blocks = soup.find_all('div', class_='info-block-horizontal')
        for block in blocks:
            title = block.find('p')
            if title and result_keyword in title.get_text(strip=True):
                return block.get_text(separator="\n", strip=True)

        return f"–†–∞–∑–¥–µ–ª '{result_keyword}' –Ω–µ –Ω–∞–π–¥–µ–Ω"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞: {str(e)}"

# ---------------- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ----------------
def run_parser(start_page_url, html_file, result_file, result_keyword, base_url):
    print(f"\nüöÄ –°–∫–∞—á–∏–≤–∞–µ–º –∏ –ø–∞—Ä—Å–∏–º: {start_page_url}")
    download_html(start_page_url, html_file)

    df = parse_services(html_file, base_url)

    results = []
    for _, row in df.iterrows():
        service = row['–£—Å–ª—É–≥–∞']
        link = row['–°—Å—ã–ª–∫–∞']
        result_text = extract_service_result(link, result_keyword)

        results.append({
            '–£—Å–ª—É–≥–∞': service,
            '–°—Å—ã–ª–∫–∞': link,
            '–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–∫–∞–∑–∞–Ω–∏—è —É—Å–ª—É–≥–∏': result_text
        })

    result_df = pd.DataFrame(results)
    result_df.to_csv(result_file, index=False, encoding="utf-8-sig")
    print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {result_file}")

# ---------------- –ó–∞–ø—É—Å–∫ –¥–ª—è 3 —è–∑—ã–∫–æ–≤ ----------------
if __name__ == "__main__":
    run_parser(
        start_page_url="https://egov.kz/cms/ru/online-services/for_citizen",
        html_file="services_page_ru.html",
        result_file="services_with_results_ru.csv",
        result_keyword="–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–∫–∞–∑–∞–Ω–∏—è —É—Å–ª—É–≥–∏",
        base_url="https://egov.kz"
    )

    run_parser(
        start_page_url="https://egov.kz/cms/kk/online-services/for_citizen",
        html_file="services_page_kz.html",
        result_file="services_with_results_kz.csv",
        result_keyword="“ö—ã–∑–º–µ—Ç –∫”©—Ä—Å–µ—Ç—É –Ω”ô—Ç–∏–∂–µ—Å—ñ",
        base_url="https://egov.kz"
    )

    run_parser(
        start_page_url="https://egov.kz/cms/en/online-services/for_citizen",
        html_file="services_page_en.html",
        result_file="services_with_results_en.csv",
        result_keyword="Result of the service delivery",
        base_url="https://egov.kz"
    )

    print("\nüåü –ì–æ—Ç–æ–≤–æ: –í—Å–µ —è–∑—ã–∫–æ–≤—ã–µ –≤–µ—Ä—Å–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!")
